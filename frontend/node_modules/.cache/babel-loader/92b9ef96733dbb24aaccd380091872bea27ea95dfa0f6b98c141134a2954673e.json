{"ast":null,"code":"import { api } from './authService';\nexport const organizationService = {\n  // Create organization\n  createOrganization: async orgData => {\n    try {\n      const response = await api.post('/orgs/', orgData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create organization:', error);\n      throw error;\n    }\n  },\n  // List organizations\n  listOrganizations: async (query = '', visibility = null, limit = 20, skip = 0) => {\n    try {\n      const params = {\n        limit,\n        skip\n      };\n      if (query) params.query = query;\n      if (visibility) params.visibility = visibility;\n      const response = await api.get('/orgs/', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to list organizations:', error);\n      throw error;\n    }\n  },\n  // Get organization by ID\n  getOrganization: async orgId => {\n    try {\n      const response = await api.get(`/orgs/${orgId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get organization:', error);\n      throw error;\n    }\n  },\n  // Update organization\n  updateOrganization: async (orgId, updateData) => {\n    try {\n      const response = await api.patch(`/orgs/${orgId}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update organization:', error);\n      throw error;\n    }\n  },\n  // Get organization members\n  getMembers: async orgId => {\n    try {\n      const response = await api.get(`/orgs/${orgId}/members`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get organization members:', error);\n      throw error;\n    }\n  },\n  // Join organization\n  joinOrganization: async orgId => {\n    try {\n      const response = await api.post(`/orgs/${orgId}/members`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to join organization:', error);\n      throw error;\n    }\n  },\n  // Leave organization\n  leaveOrganization: async (orgId, userId) => {\n    try {\n      const response = await api.delete(`/orgs/${orgId}/members/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to leave organization:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","organizationService","createOrganization","orgData","response","post","data","error","console","listOrganizations","query","visibility","limit","skip","params","get","getOrganization","orgId","updateOrganization","updateData","patch","getMembers","joinOrganization","leaveOrganization","userId","delete"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/organizationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const organizationService = {\n  // Create organization\n  createOrganization: async (orgData) => {\n    try {\n      const response = await api.post('/orgs/', orgData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create organization:', error);\n      throw error;\n    }\n  },\n\n  // List organizations\n  listOrganizations: async (query = '', visibility = null, limit = 20, skip = 0) => {\n    try {\n      const params = { limit, skip };\n      if (query) params.query = query;\n      if (visibility) params.visibility = visibility;\n      \n      const response = await api.get('/orgs/', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to list organizations:', error);\n      throw error;\n    }\n  },\n\n  // Get organization by ID\n  getOrganization: async (orgId) => {\n    try {\n      const response = await api.get(`/orgs/${orgId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get organization:', error);\n      throw error;\n    }\n  },\n\n  // Update organization\n  updateOrganization: async (orgId, updateData) => {\n    try {\n      const response = await api.patch(`/orgs/${orgId}`, updateData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update organization:', error);\n      throw error;\n    }\n  },\n\n  // Get organization members\n  getMembers: async (orgId) => {\n    try {\n      const response = await api.get(`/orgs/${orgId}/members`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get organization members:', error);\n      throw error;\n    }\n  },\n\n  // Join organization\n  joinOrganization: async (orgId) => {\n    try {\n      const response = await api.post(`/orgs/${orgId}/members`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to join organization:', error);\n      throw error;\n    }\n  },\n\n  // Leave organization\n  leaveOrganization: async (orgId, userId) => {\n    try {\n      const response = await api.delete(`/orgs/${orgId}/members/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to leave organization:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}