{"ast":null,"code":"import{api}from'./authService';export const discordService={// Guild Management\nregisterGuild:async guildData=>{try{const response=await api.post('/discord/guilds',guildData);return response.data;}catch(error){console.error('Failed to register Discord guild:',error);throw error;}},getGuilds:async function(){let orgId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{const params=orgId?{org_id:orgId}:{};const response=await api.get('/discord/guilds',{params});return response.data;}catch(error){console.error('Failed to get Discord guilds:',error);throw error;}},getGuild:async guildId=>{try{const response=await api.get(\"/discord/guilds/\".concat(guildId));return response.data;}catch(error){console.error('Failed to get Discord guild:',error);throw error;}},// Announcements\nannounceEvent:async announcement=>{try{const response=await api.post('/discord/announce/event',announcement);return response.data;}catch(error){console.error('Failed to announce event:',error);throw error;}},announceTournament:async announcement=>{try{const response=await api.post('/discord/announce/tournament',announcement);return response.data;}catch(error){console.error('Failed to announce tournament:',error);throw error;}},// Message Synchronization\nsyncMessage:async syncRequest=>{try{const response=await api.post('/discord/sync/message',syncRequest);return response.data;}catch(error){console.error('Failed to sync message:',error);throw error;}},// Reminders\nscheduleEventReminders:async eventId=>{try{const response=await api.post(\"/discord/reminders/schedule/\".concat(eventId));return response.data;}catch(error){console.error('Failed to schedule reminders:',error);throw error;}},// Job Management (Admin)\ngetJobs:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/discord/jobs',{params});return response.data;}catch(error){console.error('Failed to get Discord jobs:',error);throw error;}},processJobs:async()=>{try{const response=await api.post('/discord/jobs/process');return response.data;}catch(error){console.error('Failed to process Discord jobs:',error);throw error;}},// Statistics and Health\ngetStats:async()=>{try{const response=await api.get('/discord/stats');return response.data;}catch(error){console.error('Failed to get Discord stats:',error);throw error;}},getHealth:async()=>{try{const response=await api.get('/discord/health');return response.data;}catch(error){console.error('Failed to get Discord health:',error);throw error;}}};","map":{"version":3,"names":["api","discordService","registerGuild","guildData","response","post","data","error","console","getGuilds","orgId","arguments","length","undefined","params","org_id","get","getGuild","guildId","concat","announceEvent","announcement","announceTournament","syncMessage","syncRequest","scheduleEventReminders","eventId","getJobs","processJobs","getStats","getHealth"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/discordService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const discordService = {\n  // Guild Management\n  registerGuild: async (guildData) => {\n    try {\n      const response = await api.post('/discord/guilds', guildData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to register Discord guild:', error);\n      throw error;\n    }\n  },\n\n  getGuilds: async (orgId = null) => {\n    try {\n      const params = orgId ? { org_id: orgId } : {};\n      const response = await api.get('/discord/guilds', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guilds:', error);\n      throw error;\n    }\n  },\n\n  getGuild: async (guildId) => {\n    try {\n      const response = await api.get(`/discord/guilds/${guildId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guild:', error);\n      throw error;\n    }\n  },\n\n  // Announcements\n  announceEvent: async (announcement) => {\n    try {\n      const response = await api.post('/discord/announce/event', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce event:', error);\n      throw error;\n    }\n  },\n\n  announceTournament: async (announcement) => {\n    try {\n      const response = await api.post('/discord/announce/tournament', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce tournament:', error);\n      throw error;\n    }\n  },\n\n  // Message Synchronization\n  syncMessage: async (syncRequest) => {\n    try {\n      const response = await api.post('/discord/sync/message', syncRequest);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to sync message:', error);\n      throw error;\n    }\n  },\n\n  // Reminders\n  scheduleEventReminders: async (eventId) => {\n    try {\n      const response = await api.post(`/discord/reminders/schedule/${eventId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to schedule reminders:', error);\n      throw error;\n    }\n  },\n\n  // Job Management (Admin)\n  getJobs: async (params = {}) => {\n    try {\n      const response = await api.get('/discord/jobs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord jobs:', error);\n      throw error;\n    }\n  },\n\n  processJobs: async () => {\n    try {\n      const response = await api.post('/discord/jobs/process');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to process Discord jobs:', error);\n      throw error;\n    }\n  },\n\n  // Statistics and Health\n  getStats: async () => {\n    try {\n      const response = await api.get('/discord/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord stats:', error);\n      throw error;\n    }\n  },\n\n  getHealth: async () => {\n    try {\n      const response = await api.get('/discord/health');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord health:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}