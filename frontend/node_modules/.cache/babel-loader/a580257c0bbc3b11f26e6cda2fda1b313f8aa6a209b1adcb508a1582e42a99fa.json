{"ast":null,"code":"import{api}from'./authService';export const notificationService={// Get user notifications\ngetNotifications:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/notifications/me',{params});return response.data;}catch(error){console.error('Failed to get notifications:',error);throw error;}},// Get notification statistics\ngetNotificationStats:async()=>{try{const response=await api.get('/notifications/me/stats');return response.data;}catch(error){console.error('Failed to get notification stats:',error);throw error;}},// Mark notification as read\nmarkAsRead:async notificationId=>{try{const response=await api.post(\"/notifications/\".concat(notificationId,\"/read\"));return response.data;}catch(error){console.error('Failed to mark notification as read:',error);throw error;}},// Mark all notifications as read\nmarkAllAsRead:async()=>{try{const response=await api.post('/notifications/me/read-all');return response.data;}catch(error){console.error('Failed to mark all notifications as read:',error);throw error;}},// Get notification preferences\ngetNotificationPreferences:async()=>{try{const response=await api.get('/notifications/me/preferences');return response.data;}catch(error){console.error('Failed to get notification preferences:',error);throw error;}},// Update notification preferences\nupdateNotificationPreferences:async preferences=>{try{const response=await api.put('/notifications/me/preferences',{preferences});return response.data;}catch(error){console.error('Failed to update notification preferences:',error);throw error;}},// Create test notification (development)\ncreateTestNotification:async()=>{try{const response=await api.post('/notifications/test');return response.data;}catch(error){console.error('Failed to create test notification:',error);throw error;}}};","map":{"version":3,"names":["api","notificationService","getNotifications","params","arguments","length","undefined","response","get","data","error","console","getNotificationStats","markAsRead","notificationId","post","concat","markAllAsRead","getNotificationPreferences","updateNotificationPreferences","preferences","put","createTestNotification"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/notificationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const notificationService = {\n  // Get user notifications\n  getNotifications: async (params = {}) => {\n    try {\n      const response = await api.get('/notifications/me', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notifications:', error);\n      throw error;\n    }\n  },\n\n  // Get notification statistics\n  getNotificationStats: async () => {\n    try {\n      const response = await api.get('/notifications/me/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification stats:', error);\n      throw error;\n    }\n  },\n\n  // Mark notification as read\n  markAsRead: async (notificationId) => {\n    try {\n      const response = await api.post(`/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n      throw error;\n    }\n  },\n\n  // Mark all notifications as read\n  markAllAsRead: async () => {\n    try {\n      const response = await api.post('/notifications/me/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n      throw error;\n    }\n  },\n\n  // Get notification preferences\n  getNotificationPreferences: async () => {\n    try {\n      const response = await api.get('/notifications/me/preferences');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification preferences:', error);\n      throw error;\n    }\n  },\n\n  // Update notification preferences\n  updateNotificationPreferences: async (preferences) => {\n    try {\n      const response = await api.put('/notifications/me/preferences', { preferences });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update notification preferences:', error);\n      throw error;\n    }\n  },\n\n  // Create test notification (development)\n  createTestNotification: async () => {\n    try {\n      const response = await api.post('/notifications/test');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create test notification:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,OAASA,GAAG,KAAQ,eAAe,CAEnC,MAAO,MAAM,CAAAC,mBAAmB,CAAG,CACjC;AACAC,gBAAgB,CAAE,cAAAA,CAAA,CAAuB,IAAhB,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAClC,GAAI,CACF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAAC,mBAAmB,CAAE,CAAEL,MAAO,CAAC,CAAC,CAC/D,MAAO,CAAAI,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAE,oBAAoB,CAAE,KAAAA,CAAA,GAAY,CAChC,GAAI,CACF,KAAM,CAAAL,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAAC,yBAAyB,CAAC,CACzD,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,CAAEA,KAAK,CAAC,CACzD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAG,UAAU,CAAE,KAAO,CAAAC,cAAc,EAAK,CACpC,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACe,IAAI,mBAAAC,MAAA,CAAmBF,cAAc,SAAO,CAAC,CACxE,MAAO,CAAAP,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,CAAEA,KAAK,CAAC,CAC5D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAO,aAAa,CAAE,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACe,IAAI,CAAC,4BAA4B,CAAC,CAC7D,MAAO,CAAAR,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,CAAEA,KAAK,CAAC,CACjE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAQ,0BAA0B,CAAE,KAAAA,CAAA,GAAY,CACtC,GAAI,CACF,KAAM,CAAAX,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAAC,+BAA+B,CAAC,CAC/D,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,CAAEA,KAAK,CAAC,CAC/D,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAS,6BAA6B,CAAE,KAAO,CAAAC,WAAW,EAAK,CACpD,GAAI,CACF,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACqB,GAAG,CAAC,+BAA+B,CAAE,CAAED,WAAY,CAAC,CAAC,CAChF,MAAO,CAAAb,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAEA,KAAK,CAAC,CAClE,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAY,sBAAsB,CAAE,KAAAA,CAAA,GAAY,CAClC,GAAI,CACF,KAAM,CAAAf,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACe,IAAI,CAAC,qBAAqB,CAAC,CACtD,MAAO,CAAAR,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC3D,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}