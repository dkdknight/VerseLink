{"ast":null,"code":"import { api } from './authService';\nexport const autoModerationService = {\n  // Get auto-moderation configuration (admin only)\n  getConfig: async () => {\n    try {\n      const response = await api.get('/auto-moderation/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation config:', error);\n      throw error;\n    }\n  },\n  // Update auto-moderation configuration (admin only)\n  updateConfig: async config => {\n    try {\n      const response = await api.put('/auto-moderation/config', config);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update auto-moderation config:', error);\n      throw error;\n    }\n  },\n  // Toggle auto-moderation on/off (admin only)\n  toggle: async enabled => {\n    try {\n      const response = await api.post(`/auto-moderation/toggle?enabled=${enabled}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to toggle auto-moderation:', error);\n      throw error;\n    }\n  },\n  // Check message content for violations (testing)\n  checkMessage: async (content, context = null) => {\n    try {\n      const response = await api.post('/auto-moderation/check-message', {\n        content,\n        context\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to check message:', error);\n      throw error;\n    }\n  },\n  // Get auto-moderation statistics (admin only)\n  getStats: async () => {\n    try {\n      const response = await api.get('/auto-moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation stats:', error);\n      throw error;\n    }\n  },\n  // Get auto-moderation logs (admin only)\n  getLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/auto-moderation/logs', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation logs:', error);\n      throw error;\n    }\n  },\n  // Clear old auto-moderation logs (admin only)\n  clearOldLogs: async (daysOld = 30) => {\n    try {\n      const response = await api.delete(`/auto-moderation/logs?days_old=${daysOld}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to clear old logs:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","autoModerationService","getConfig","response","get","data","error","console","updateConfig","config","put","toggle","enabled","post","checkMessage","content","context","getStats","getLogs","params","clearOldLogs","daysOld","delete"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/autoModerationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const autoModerationService = {\n  // Get auto-moderation configuration (admin only)\n  getConfig: async () => {\n    try {\n      const response = await api.get('/auto-moderation/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation config:', error);\n      throw error;\n    }\n  },\n\n  // Update auto-moderation configuration (admin only)\n  updateConfig: async (config) => {\n    try {\n      const response = await api.put('/auto-moderation/config', config);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update auto-moderation config:', error);\n      throw error;\n    }\n  },\n\n  // Toggle auto-moderation on/off (admin only)\n  toggle: async (enabled) => {\n    try {\n      const response = await api.post(`/auto-moderation/toggle?enabled=${enabled}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to toggle auto-moderation:', error);\n      throw error;\n    }\n  },\n\n  // Check message content for violations (testing)\n  checkMessage: async (content, context = null) => {\n    try {\n      const response = await api.post('/auto-moderation/check-message', {\n        content,\n        context\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to check message:', error);\n      throw error;\n    }\n  },\n\n  // Get auto-moderation statistics (admin only)\n  getStats: async () => {\n    try {\n      const response = await api.get('/auto-moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation stats:', error);\n      throw error;\n    }\n  },\n\n  // Get auto-moderation logs (admin only)\n  getLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/auto-moderation/logs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation logs:', error);\n      throw error;\n    }\n  },\n\n  // Clear old auto-moderation logs (admin only)\n  clearOldLogs: async (daysOld = 30) => {\n    try {\n      const response = await api.delete(`/auto-moderation/logs?days_old=${daysOld}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to clear old logs:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,eAAe;AAEnC,OAAO,MAAMC,qBAAqB,GAAG;EACnC;EACAC,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,yBAAyB,CAAC;MACzD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC7D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC9B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACU,GAAG,CAAC,yBAAyB,EAAED,MAAM,CAAC;MACjE,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAK,MAAM,EAAE,MAAOC,OAAO,IAAK;IACzB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACa,IAAI,CAAC,mCAAmCD,OAAO,EAAE,CAAC;MAC7E,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,YAAY,EAAE,MAAAA,CAAOC,OAAO,EAAEC,OAAO,GAAG,IAAI,KAAK;IAC/C,IAAI;MACF,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACa,IAAI,CAAC,gCAAgC,EAAE;QAChEE,OAAO;QACPC;MACF,CAAC,CAAC;MACF,OAAOb,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,wBAAwB,CAAC;MACxD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAY,OAAO,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IAC9B,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,uBAAuB,EAAE;QAAEe;MAAO,CAAC,CAAC;MACnE,OAAOhB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAc,YAAY,EAAE,MAAAA,CAAOC,OAAO,GAAG,EAAE,KAAK;IACpC,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMH,GAAG,CAACsB,MAAM,CAAC,kCAAkCD,OAAO,EAAE,CAAC;MAC9E,OAAOlB,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}