{"ast":null,"code":"import { api } from './authService';\nexport const moderationService = {\n  // Report user\n  createReport: async reportData => {\n    try {\n      const response = await api.post('/moderation/reports', reportData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create report:', error);\n      throw error;\n    }\n  },\n  // Get reports (admin only)\n  getReports: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/reports', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get reports:', error);\n      throw error;\n    }\n  },\n  // Get specific report (admin only)\n  getReport: async reportId => {\n    try {\n      const response = await api.get(`/moderation/reports/${reportId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get report:', error);\n      throw error;\n    }\n  },\n  // Handle report (admin only)\n  handleReport: async (reportId, actionData) => {\n    try {\n      const response = await api.post(`/moderation/reports/${reportId}/action`, actionData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to handle report:', error);\n      throw error;\n    }\n  },\n  // Get user moderation history (admin only)\n  getUserModerationHistory: async userId => {\n    try {\n      const response = await api.get(`/moderation/users/${userId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get user moderation history:', error);\n      throw error;\n    }\n  },\n  // Get moderation statistics (admin only)\n  getModerationStats: async () => {\n    try {\n      const response = await api.get('/moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get moderation stats:', error);\n      throw error;\n    }\n  },\n  // Get audit logs (admin only)\n  getAuditLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/audit-logs', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get audit logs:', error);\n      throw error;\n    }\n  },\n  // Unban expired users (admin only)\n  unbanExpiredUsers: async () => {\n    try {\n      const response = await api.post('/moderation/maintenance/unban-expired');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to unban expired users:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","moderationService","createReport","reportData","response","post","data","error","console","getReports","params","get","getReport","reportId","handleReport","actionData","getUserModerationHistory","userId","getModerationStats","getAuditLogs","unbanExpiredUsers"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/moderationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const moderationService = {\n  // Report user\n  createReport: async (reportData) => {\n    try {\n      const response = await api.post('/moderation/reports', reportData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create report:', error);\n      throw error;\n    }\n  },\n\n  // Get reports (admin only)\n  getReports: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/reports', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get reports:', error);\n      throw error;\n    }\n  },\n\n  // Get specific report (admin only)\n  getReport: async (reportId) => {\n    try {\n      const response = await api.get(`/moderation/reports/${reportId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get report:', error);\n      throw error;\n    }\n  },\n\n  // Handle report (admin only)\n  handleReport: async (reportId, actionData) => {\n    try {\n      const response = await api.post(`/moderation/reports/${reportId}/action`, actionData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to handle report:', error);\n      throw error;\n    }\n  },\n\n  // Get user moderation history (admin only)\n  getUserModerationHistory: async (userId) => {\n    try {\n      const response = await api.get(`/moderation/users/${userId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get user moderation history:', error);\n      throw error;\n    }\n  },\n\n  // Get moderation statistics (admin only)\n  getModerationStats: async () => {\n    try {\n      const response = await api.get('/moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get moderation stats:', error);\n      throw error;\n    }\n  },\n\n  // Get audit logs (admin only)\n  getAuditLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/audit-logs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get audit logs:', error);\n      throw error;\n    }\n  },\n\n  // Unban expired users (admin only)\n  unbanExpiredUsers: async () => {\n    try {\n      const response = await api.post('/moderation/maintenance/unban-expired');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to unban expired users:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}