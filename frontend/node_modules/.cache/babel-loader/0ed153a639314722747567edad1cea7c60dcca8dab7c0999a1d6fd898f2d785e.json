{"ast":null,"code":"import{api}from'./authService';export const autoModerationService={// Get auto-moderation configuration (admin only)\ngetConfig:async()=>{try{const response=await api.get('/auto-moderation/config');return response.data;}catch(error){console.error('Failed to get auto-moderation config:',error);throw error;}},// Update auto-moderation configuration (admin only)\nupdateConfig:async config=>{try{const response=await api.put('/auto-moderation/config',config);return response.data;}catch(error){console.error('Failed to update auto-moderation config:',error);throw error;}},// Toggle auto-moderation on/off (admin only)\ntoggle:async enabled=>{try{const response=await api.post(\"/auto-moderation/toggle?enabled=\".concat(enabled));return response.data;}catch(error){console.error('Failed to toggle auto-moderation:',error);throw error;}},// Check message content for violations (testing)\ncheckMessage:async function(content){let context=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const response=await api.post('/auto-moderation/check-message',{content,context});return response.data;}catch(error){console.error('Failed to check message:',error);throw error;}},// Get auto-moderation statistics (admin only)\ngetStats:async()=>{try{const response=await api.get('/auto-moderation/stats');return response.data;}catch(error){console.error('Failed to get auto-moderation stats:',error);throw error;}},// Get auto-moderation logs (admin only)\ngetLogs:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/auto-moderation/logs',{params});return response.data;}catch(error){console.error('Failed to get auto-moderation logs:',error);throw error;}},// Clear old auto-moderation logs (admin only)\nclearOldLogs:async function(){let daysOld=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30;try{const response=await api.delete(\"/auto-moderation/logs?days_old=\".concat(daysOld));return response.data;}catch(error){console.error('Failed to clear old logs:',error);throw error;}}};","map":{"version":3,"names":["api","autoModerationService","getConfig","response","get","data","error","console","updateConfig","config","put","toggle","enabled","post","concat","checkMessage","content","context","arguments","length","undefined","getStats","getLogs","params","clearOldLogs","daysOld","delete"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-orgup/frontend/src/services/autoModerationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const autoModerationService = {\n  // Get auto-moderation configuration (admin only)\n  getConfig: async () => {\n    try {\n      const response = await api.get('/auto-moderation/config');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation config:', error);\n      throw error;\n    }\n  },\n\n  // Update auto-moderation configuration (admin only)\n  updateConfig: async (config) => {\n    try {\n      const response = await api.put('/auto-moderation/config', config);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update auto-moderation config:', error);\n      throw error;\n    }\n  },\n\n  // Toggle auto-moderation on/off (admin only)\n  toggle: async (enabled) => {\n    try {\n      const response = await api.post(`/auto-moderation/toggle?enabled=${enabled}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to toggle auto-moderation:', error);\n      throw error;\n    }\n  },\n\n  // Check message content for violations (testing)\n  checkMessage: async (content, context = null) => {\n    try {\n      const response = await api.post('/auto-moderation/check-message', {\n        content,\n        context\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to check message:', error);\n      throw error;\n    }\n  },\n\n  // Get auto-moderation statistics (admin only)\n  getStats: async () => {\n    try {\n      const response = await api.get('/auto-moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation stats:', error);\n      throw error;\n    }\n  },\n\n  // Get auto-moderation logs (admin only)\n  getLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/auto-moderation/logs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get auto-moderation logs:', error);\n      throw error;\n    }\n  },\n\n  // Clear old auto-moderation logs (admin only)\n  clearOldLogs: async (daysOld = 30) => {\n    try {\n      const response = await api.delete(`/auto-moderation/logs?days_old=${daysOld}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to clear old logs:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}