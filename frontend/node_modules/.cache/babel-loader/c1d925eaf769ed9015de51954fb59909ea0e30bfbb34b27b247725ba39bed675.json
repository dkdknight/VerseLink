{"ast":null,"code":"import { api } from './authService';\nexport const discordService = {\n  // Guild Management\n  registerGuild: async guildData => {\n    try {\n      const response = await api.post('/discord/guilds', guildData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to register Discord guild:', error);\n      throw error;\n    }\n  },\n  getGuilds: async (orgId = null) => {\n    try {\n      const params = orgId ? {\n        org_id: orgId\n      } : {};\n      const response = await api.get('/discord/guilds', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guilds:', error);\n      throw error;\n    }\n  },\n  getGuild: async guildId => {\n    try {\n      const response = await api.get(`/discord/guilds/${guildId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guild:', error);\n      throw error;\n    }\n  },\n  // Announcements\n  announceEvent: async announcement => {\n    try {\n      const response = await api.post('/discord/announce/event', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce event:', error);\n      throw error;\n    }\n  },\n  announceTournament: async announcement => {\n    try {\n      const response = await api.post('/discord/announce/tournament', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce tournament:', error);\n      throw error;\n    }\n  },\n  // Message Synchronization\n  syncMessage: async syncRequest => {\n    try {\n      const response = await api.post('/discord/sync/message', syncRequest);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to sync message:', error);\n      throw error;\n    }\n  },\n  // Reminders\n  scheduleEventReminders: async eventId => {\n    try {\n      const response = await api.post(`/discord/reminders/schedule/${eventId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to schedule reminders:', error);\n      throw error;\n    }\n  },\n  // Job Management (Admin)\n  getJobs: async (params = {}) => {\n    try {\n      const response = await api.get('/discord/jobs', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord jobs:', error);\n      throw error;\n    }\n  },\n  processJobs: async () => {\n    try {\n      const response = await api.post('/discord/jobs/process');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to process Discord jobs:', error);\n      throw error;\n    }\n  },\n  // Statistics and Health\n  getStats: async () => {\n    try {\n      const response = await api.get('/discord/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord stats:', error);\n      throw error;\n    }\n  },\n  getHealth: async () => {\n    try {\n      const response = await api.get('/discord/health');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord health:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","discordService","registerGuild","guildData","response","post","data","error","console","getGuilds","orgId","params","org_id","get","getGuild","guildId","announceEvent","announcement","announceTournament","syncMessage","syncRequest","scheduleEventReminders","eventId","getJobs","processJobs","getStats","getHealth"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/discordService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const discordService = {\n  // Guild Management\n  registerGuild: async (guildData) => {\n    try {\n      const response = await api.post('/discord/guilds', guildData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to register Discord guild:', error);\n      throw error;\n    }\n  },\n\n  getGuilds: async (orgId = null) => {\n    try {\n      const params = orgId ? { org_id: orgId } : {};\n      const response = await api.get('/discord/guilds', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guilds:', error);\n      throw error;\n    }\n  },\n\n  getGuild: async (guildId) => {\n    try {\n      const response = await api.get(`/discord/guilds/${guildId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord guild:', error);\n      throw error;\n    }\n  },\n\n  // Announcements\n  announceEvent: async (announcement) => {\n    try {\n      const response = await api.post('/discord/announce/event', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce event:', error);\n      throw error;\n    }\n  },\n\n  announceTournament: async (announcement) => {\n    try {\n      const response = await api.post('/discord/announce/tournament', announcement);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to announce tournament:', error);\n      throw error;\n    }\n  },\n\n  // Message Synchronization\n  syncMessage: async (syncRequest) => {\n    try {\n      const response = await api.post('/discord/sync/message', syncRequest);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to sync message:', error);\n      throw error;\n    }\n  },\n\n  // Reminders\n  scheduleEventReminders: async (eventId) => {\n    try {\n      const response = await api.post(`/discord/reminders/schedule/${eventId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to schedule reminders:', error);\n      throw error;\n    }\n  },\n\n  // Job Management (Admin)\n  getJobs: async (params = {}) => {\n    try {\n      const response = await api.get('/discord/jobs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord jobs:', error);\n      throw error;\n    }\n  },\n\n  processJobs: async () => {\n    try {\n      const response = await api.post('/discord/jobs/process');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to process Discord jobs:', error);\n      throw error;\n    }\n  },\n\n  // Statistics and Health\n  getStats: async () => {\n    try {\n      const response = await api.get('/discord/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord stats:', error);\n      throw error;\n    }\n  },\n\n  getHealth: async () => {\n    try {\n      const response = await api.get('/discord/health');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get Discord health:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}