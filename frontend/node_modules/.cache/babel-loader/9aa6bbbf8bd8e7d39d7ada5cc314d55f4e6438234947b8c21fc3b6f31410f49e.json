{"ast":null,"code":"import{api}from'./authService';export const userService={// Get current user profile\ngetProfile:async()=>{try{const response=await api.get('/users/me');return response.data;}catch(error){console.error('Failed to get user profile:',error);throw error;}},// Update current user profile\nupdateProfile:async profileData=>{try{const response=await api.patch('/users/me',profileData);return response.data;}catch(error){console.error('Failed to update profile:',error);throw error;}},// Get user by ID\ngetUserById:async userId=>{try{const response=await api.get(\"/users/\".concat(userId));return response.data;}catch(error){console.error('Failed to get user:',error);throw error;}},// Search users\nsearchUsers:async function(query){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;let skip=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;try{const response=await api.get('/users/',{params:{query,limit,skip}});return response.data;}catch(error){console.error('Failed to search users:',error);throw error;}}};","map":{"version":3,"names":["api","userService","getProfile","response","get","data","error","console","updateProfile","profileData","patch","getUserById","userId","concat","searchUsers","query","limit","arguments","length","undefined","skip","params"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-Xapollo/frontend/src/services/userService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const userService = {\n  // Get current user profile\n  getProfile: async () => {\n    try {\n      const response = await api.get('/users/me');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get user profile:', error);\n      throw error;\n    }\n  },\n\n  // Update current user profile\n  updateProfile: async (profileData) => {\n    try {\n      const response = await api.patch('/users/me', profileData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update profile:', error);\n      throw error;\n    }\n  },\n\n  // Get user by ID\n  getUserById: async (userId) => {\n    try {\n      const response = await api.get(`/users/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get user:', error);\n      throw error;\n    }\n  },\n\n  // Search users\n  searchUsers: async (query, limit = 20, skip = 0) => {\n    try {\n      const response = await api.get('/users/', {\n        params: { query, limit, skip }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to search users:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,OAASA,GAAG,KAAQ,eAAe,CAEnC,MAAO,MAAM,CAAAC,WAAW,CAAG,CACzB;AACAC,UAAU,CAAE,KAAAA,CAAA,GAAY,CACtB,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,WAAW,CAAC,CAC3C,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACnD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAE,aAAa,CAAE,KAAO,CAAAC,WAAW,EAAK,CACpC,GAAI,CACF,KAAM,CAAAN,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACU,KAAK,CAAC,WAAW,CAAED,WAAW,CAAC,CAC1D,MAAO,CAAAN,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAK,WAAW,CAAE,KAAO,CAAAC,MAAM,EAAK,CAC7B,GAAI,CACF,KAAM,CAAAT,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,WAAAS,MAAA,CAAWD,MAAM,CAAE,CAAC,CAClD,MAAO,CAAAT,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACAQ,WAAW,CAAE,cAAAA,CAAOC,KAAK,CAA2B,IAAzB,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,IAAE,CAAAG,IAAI,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAC7C,GAAI,CACF,KAAM,CAAAd,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,GAAG,CAAC,SAAS,CAAE,CACxCiB,MAAM,CAAE,CAAEN,KAAK,CAAEC,KAAK,CAAEI,IAAK,CAC/B,CAAC,CAAC,CACF,MAAO,CAAAjB,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,KAAM,CAAAA,KAAK,CACb,CACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}