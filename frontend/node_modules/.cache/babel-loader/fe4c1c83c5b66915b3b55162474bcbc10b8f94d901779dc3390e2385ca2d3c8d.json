{"ast":null,"code":"import { api } from './authService';\nexport const notificationService = {\n  // Get user notifications\n  getNotifications: async (params = {}) => {\n    try {\n      const response = await api.get('/notifications/me', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notifications:', error);\n      throw error;\n    }\n  },\n  // Get notification statistics\n  getNotificationStats: async () => {\n    try {\n      const response = await api.get('/notifications/me/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification stats:', error);\n      throw error;\n    }\n  },\n  // Mark notification as read\n  markAsRead: async notificationId => {\n    try {\n      const response = await api.post(`/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n      throw error;\n    }\n  },\n  // Mark all notifications as read\n  markAllAsRead: async () => {\n    try {\n      const response = await api.post('/notifications/me/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n      throw error;\n    }\n  },\n  // Get notification preferences\n  getNotificationPreferences: async () => {\n    try {\n      const response = await api.get('/notifications/me/preferences');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification preferences:', error);\n      throw error;\n    }\n  },\n  // Update notification preferences\n  updateNotificationPreferences: async preferences => {\n    try {\n      const response = await api.put('/notifications/me/preferences', {\n        preferences\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update notification preferences:', error);\n      throw error;\n    }\n  },\n  // Create test notification (development)\n  createTestNotification: async () => {\n    try {\n      const response = await api.post('/notifications/test');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create test notification:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["api","notificationService","getNotifications","params","response","get","data","error","console","getNotificationStats","markAsRead","notificationId","post","markAllAsRead","getNotificationPreferences","updateNotificationPreferences","preferences","put","createTestNotification"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/notificationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const notificationService = {\n  // Get user notifications\n  getNotifications: async (params = {}) => {\n    try {\n      const response = await api.get('/notifications/me', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notifications:', error);\n      throw error;\n    }\n  },\n\n  // Get notification statistics\n  getNotificationStats: async () => {\n    try {\n      const response = await api.get('/notifications/me/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification stats:', error);\n      throw error;\n    }\n  },\n\n  // Mark notification as read\n  markAsRead: async (notificationId) => {\n    try {\n      const response = await api.post(`/notifications/${notificationId}/read`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n      throw error;\n    }\n  },\n\n  // Mark all notifications as read\n  markAllAsRead: async () => {\n    try {\n      const response = await api.post('/notifications/me/read-all');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n      throw error;\n    }\n  },\n\n  // Get notification preferences\n  getNotificationPreferences: async () => {\n    try {\n      const response = await api.get('/notifications/me/preferences');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get notification preferences:', error);\n      throw error;\n    }\n  },\n\n  // Update notification preferences\n  updateNotificationPreferences: async (preferences) => {\n    try {\n      const response = await api.put('/notifications/me/preferences', { preferences });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update notification preferences:', error);\n      throw error;\n    }\n  },\n\n  // Create test notification (development)\n  createTestNotification: async () => {\n    try {\n      const response = await api.post('/notifications/test');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create test notification:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,SAASA,GAAG,QAAQ,eAAe;AAEnC,OAAO,MAAMC,mBAAmB,GAAG;EACjC;EACAC,gBAAgB,EAAE,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;IACvC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,mBAAmB,EAAE;QAAEF;MAAO,CAAC,CAAC;MAC/D,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,oBAAoB,EAAE,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAML,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,yBAAyB,CAAC;MACzD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAG,UAAU,EAAE,MAAOC,cAAc,IAAK;IACpC,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAC,kBAAkBD,cAAc,OAAO,CAAC;MACxE,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAM,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAC,4BAA4B,CAAC;MAC7D,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAO,0BAA0B,EAAE,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAC,+BAA+B,CAAC;MAC/D,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,6BAA6B,EAAE,MAAOC,WAAW,IAAK;IACpD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMJ,GAAG,CAACiB,GAAG,CAAC,+BAA+B,EAAE;QAAED;MAAY,CAAC,CAAC;MAChF,OAAOZ,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;MAClE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAW,sBAAsB,EAAE,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMJ,GAAG,CAACY,IAAI,CAAC,qBAAqB,CAAC;MACtD,OAAOR,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;MAC3D,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}