{"ast":null,"code":"import { api } from './authService';\nexport const tournamentService = {\n  // List tournaments with filters\n  listTournaments: async (params = {}) => {\n    try {\n      const response = await api.get('/tournaments/', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to list tournaments:', error);\n      throw error;\n    }\n  },\n  // Get tournament details\n  getTournament: async tournamentId => {\n    try {\n      const response = await api.get(`/tournaments/${tournamentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get tournament:', error);\n      throw error;\n    }\n  },\n  // Create tournament for organization\n  createTournament: async (orgId, tournamentData) => {\n    try {\n      const response = await api.post(`/orgs/${orgId}/tournaments`, tournamentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create tournament:', error);\n      throw error;\n    }\n  },\n  // Create team for tournament\n  createTeam: async (tournamentId, teamData) => {\n    try {\n      const response = await api.post(`/tournaments/${tournamentId}/teams`, teamData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create team:', error);\n      throw error;\n    }\n  },\n  // Add member to team\n  addTeamMember: async (tournamentId, teamId, userId) => {\n    try {\n      const formData = new FormData();\n      formData.append('user_id', userId);\n      const response = await api.post(`/tournaments/${tournamentId}/teams/${teamId}/members`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add team member:', error);\n      throw error;\n    }\n  },\n  // Remove member from team\n  removeTeamMember: async (tournamentId, teamId, userId) => {\n    try {\n      const response = await api.delete(`/tournaments/${tournamentId}/teams/${teamId}/members/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to remove team member:', error);\n      throw error;\n    }\n  },\n  // Report match score\n  reportMatchScore: async (matchId, scoreData) => {\n    try {\n      const response = await api.post(`/tournaments/matches/${matchId}/report`, scoreData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to report match score:', error);\n      throw error;\n    }\n  },\n  // Verify match result (referee only)\n  verifyMatchResult: async matchId => {\n    try {\n      const response = await api.post(`/tournaments/matches/${matchId}/verify`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to verify match result:', error);\n      throw error;\n    }\n  },\n  // Upload match attachment\n  uploadMatchAttachment: async (matchId, file, description = '') => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      if (description) {\n        formData.append('description', description);\n      }\n      const response = await api.post(`/tournaments/matches/${matchId}/attachments`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to upload match attachment:', error);\n      throw error;\n    }\n  },\n  // Delete attachment\n  deleteAttachment: async attachmentId => {\n    try {\n      const response = await api.delete(`/tournaments/attachments/${attachmentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to delete attachment:', error);\n      throw error;\n    }\n  },\n  // Download attachment\n  downloadAttachment: attachmentId => {\n    // Return the download URL\n    return `${api.defaults.baseURL}/tournaments/attachments/${attachmentId}/download`;\n  }\n};","map":{"version":3,"names":["api","tournamentService","listTournaments","params","response","get","data","error","console","getTournament","tournamentId","createTournament","orgId","tournamentData","post","createTeam","teamData","addTeamMember","teamId","userId","formData","FormData","append","headers","removeTeamMember","delete","reportMatchScore","matchId","scoreData","verifyMatchResult","uploadMatchAttachment","file","description","deleteAttachment","attachmentId","downloadAttachment","defaults","baseURL"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-main/frontend/src/services/tournamentService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const tournamentService = {\n  // List tournaments with filters\n  listTournaments: async (params = {}) => {\n    try {\n      const response = await api.get('/tournaments/', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to list tournaments:', error);\n      throw error;\n    }\n  },\n\n  // Get tournament details\n  getTournament: async (tournamentId) => {\n    try {\n      const response = await api.get(`/tournaments/${tournamentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get tournament:', error);\n      throw error;\n    }\n  },\n\n  // Create tournament for organization\n  createTournament: async (orgId, tournamentData) => {\n    try {\n      const response = await api.post(`/orgs/${orgId}/tournaments`, tournamentData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create tournament:', error);\n      throw error;\n    }\n  },\n\n  // Create team for tournament\n  createTeam: async (tournamentId, teamData) => {\n    try {\n      const response = await api.post(`/tournaments/${tournamentId}/teams`, teamData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create team:', error);\n      throw error;\n    }\n  },\n\n  // Add member to team\n  addTeamMember: async (tournamentId, teamId, userId) => {\n    try {\n      const formData = new FormData();\n      formData.append('user_id', userId);\n      \n      const response = await api.post(`/tournaments/${tournamentId}/teams/${teamId}/members`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add team member:', error);\n      throw error;\n    }\n  },\n\n  // Remove member from team\n  removeTeamMember: async (tournamentId, teamId, userId) => {\n    try {\n      const response = await api.delete(`/tournaments/${tournamentId}/teams/${teamId}/members/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to remove team member:', error);\n      throw error;\n    }\n  },\n\n  // Report match score\n  reportMatchScore: async (matchId, scoreData) => {\n    try {\n      const response = await api.post(`/tournaments/matches/${matchId}/report`, scoreData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to report match score:', error);\n      throw error;\n    }\n  },\n\n  // Verify match result (referee only)\n  verifyMatchResult: async (matchId) => {\n    try {\n      const response = await api.post(`/tournaments/matches/${matchId}/verify`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to verify match result:', error);\n      throw error;\n    }\n  },\n\n  // Upload match attachment\n  uploadMatchAttachment: async (matchId, file, description = '') => {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      if (description) {\n        formData.append('description', description);\n      }\n      \n      const response = await api.post(`/tournaments/matches/${matchId}/attachments`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to upload match attachment:', error);\n      throw error;\n    }\n  },\n\n  // Delete attachment\n  deleteAttachment: async (attachmentId) => {\n    try {\n      const response = await api.delete(`/tournaments/attachments/${attachmentId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to delete attachment:', error);\n      throw error;\n    }\n  },\n\n  // Download attachment\n  downloadAttachment: (attachmentId) => {\n    // Return the download URL\n    return `${api.defaults.baseURL}/tournaments/attachments/${attachmentId}/download`;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}