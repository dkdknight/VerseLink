{"ast":null,"code":"import{api}from'./authService';export const moderationService={// Report user\ncreateReport:async reportData=>{try{const response=await api.post('/moderation/reports',reportData);return response.data;}catch(error){console.error('Failed to create report:',error);throw error;}},// Get reports (admin only)\ngetReports:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/moderation/reports',{params});return response.data;}catch(error){console.error('Failed to get reports:',error);throw error;}},// Get specific report (admin only)\ngetReport:async reportId=>{try{const response=await api.get(\"/moderation/reports/\".concat(reportId));return response.data;}catch(error){console.error('Failed to get report:',error);throw error;}},// Handle report (admin only)\nhandleReport:async(reportId,actionData)=>{try{const response=await api.post(\"/moderation/reports/\".concat(reportId,\"/action\"),actionData);return response.data;}catch(error){console.error('Failed to handle report:',error);throw error;}},// Get user moderation history (admin only)\ngetUserModerationHistory:async userId=>{try{const response=await api.get(\"/moderation/users/\".concat(userId,\"/history\"));return response.data;}catch(error){console.error('Failed to get user moderation history:',error);throw error;}},// Get moderation statistics (admin only)\ngetModerationStats:async()=>{try{const response=await api.get('/moderation/stats');return response.data;}catch(error){console.error('Failed to get moderation stats:',error);throw error;}},// Get audit logs (admin only)\ngetAuditLogs:async function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{const response=await api.get('/moderation/audit-logs',{params});return response.data;}catch(error){console.error('Failed to get audit logs:',error);throw error;}},// Unban expired users (admin only)\nunbanExpiredUsers:async()=>{try{const response=await api.post('/moderation/maintenance/unban-expired');return response.data;}catch(error){console.error('Failed to unban expired users:',error);throw error;}}};","map":{"version":3,"names":["api","moderationService","createReport","reportData","response","post","data","error","console","getReports","params","arguments","length","undefined","get","getReport","reportId","concat","handleReport","actionData","getUserModerationHistory","userId","getModerationStats","getAuditLogs","unbanExpiredUsers"],"sources":["C:/Users/Knight-Server/Desktop/VerseLink-conflict_090925_1049/frontend/src/services/moderationService.js"],"sourcesContent":["import { api } from './authService';\n\nexport const moderationService = {\n  // Report user\n  createReport: async (reportData) => {\n    try {\n      const response = await api.post('/moderation/reports', reportData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create report:', error);\n      throw error;\n    }\n  },\n\n  // Get reports (admin only)\n  getReports: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/reports', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get reports:', error);\n      throw error;\n    }\n  },\n\n  // Get specific report (admin only)\n  getReport: async (reportId) => {\n    try {\n      const response = await api.get(`/moderation/reports/${reportId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get report:', error);\n      throw error;\n    }\n  },\n\n  // Handle report (admin only)\n  handleReport: async (reportId, actionData) => {\n    try {\n      const response = await api.post(`/moderation/reports/${reportId}/action`, actionData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to handle report:', error);\n      throw error;\n    }\n  },\n\n  // Get user moderation history (admin only)\n  getUserModerationHistory: async (userId) => {\n    try {\n      const response = await api.get(`/moderation/users/${userId}/history`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get user moderation history:', error);\n      throw error;\n    }\n  },\n\n  // Get moderation statistics (admin only)\n  getModerationStats: async () => {\n    try {\n      const response = await api.get('/moderation/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get moderation stats:', error);\n      throw error;\n    }\n  },\n\n  // Get audit logs (admin only)\n  getAuditLogs: async (params = {}) => {\n    try {\n      const response = await api.get('/moderation/audit-logs', { params });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get audit logs:', error);\n      throw error;\n    }\n  },\n\n  // Unban expired users (admin only)\n  unbanExpiredUsers: async () => {\n    try {\n      const response = await api.post('/moderation/maintenance/unban-expired');\n      return response.data;\n    } catch (error) {\n      console.error('Failed to unban expired users:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}