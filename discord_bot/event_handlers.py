import discord
from typing import Optional, Dict, Any, List
import logging
from datetime import datetime, timedelta, timezone
import re

from verselink_api import VerselinkAPI
from utils import *
from config import Config

logger = logging.getLogger(__name__)

class EventCreationHandler:
    """Gestionnaire pour la cr√©ation d'√©v√©nements"""
    
    def __init__(self, api: VerselinkAPI):
        self.api = api
        
    async def handle_event_message(self, message: discord.Message, session):
        """G√®re les messages pour la cr√©ation d'√©v√©nements"""
        current_step = self.get_current_step(session)
        
        if current_step == 'title':
            await self.handle_title(message, session)
        elif current_step == 'description':
            await self.handle_description(message, session)
        elif current_step == 'organization':
            await self.handle_organization(message, session)
        elif current_step == 'date':
            await self.handle_date(message, session)
        elif current_step == 'duration':
            await self.handle_duration(message, session)
        elif current_step == 'location':
            await self.handle_location(message, session)
        elif current_step == 'max_participants':
            await self.handle_max_participants(message, session)
        elif current_step == 'roles':
            await self.handle_roles(message, session)
        elif current_step == 'visibility':
            await self.handle_visibility(message, session)
        elif current_step == 'confirmation':
            await self.handle_confirmation(message, session)
    
    def get_current_step(self, session) -> str:
        """D√©termine l'√©tape actuelle bas√©e sur les donn√©es collect√©es"""
        steps = ['title', 'description', 'organization', 'date', 'duration', 
                'location', 'max_participants', 'roles', 'visibility', 'confirmation']
        
        for step in steps:
            if step not in session.data:
                return step
        return 'confirmation'
    
    async def handle_title(self, message: discord.Message, session):
        """G√®re la saisie du titre"""
        title = message.content.strip()
        
        if len(title) < 3:
            embed = create_error_embed(
                "‚ùå Titre trop court",
                "Le titre doit contenir au moins 3 caract√®res.\n\n"
                "Essayez quelque chose de plus descriptif comme :\n"
                "‚Ä¢ \"Raid sur Jumptown\"\n"
                "‚Ä¢ \"Course Murray Cup\"\n"
                "‚Ä¢ \"Exploration Pyro\""
            )
            await message.channel.send(embed=embed)
            return
            
        if len(title) > 100:
            embed = create_error_embed(
                "‚ùå Titre trop long",
                "Le titre ne peut pas d√©passer 100 caract√®res.\n\n"
                "Essayez de le raccourcir tout en gardant l'essentiel."
            )
            await message.channel.send(embed=embed)
            return
        
        session.data['title'] = title
        
        embed = create_success_embed(
            "‚úÖ Titre enregistr√©",
            f"**Titre :** {title}\n\n"
            f"Maintenant, d√©crivez votre √©v√©nement en quelques phrases.\n\n"
            f"üí° **Une bonne description contient :**\n"
            f"‚Ä¢ L'objectif de l'√©v√©nement\n"
            f"‚Ä¢ Ce qui va se passer\n"
            f"‚Ä¢ Pr√©requis √©ventuels\n"
            f"‚Ä¢ R√©compenses ou butin\n\n"
            f"üìù **Exemple :**\n"
            f"*\"Op√©ration de nettoyage sur Jumptown. Nous allons s√©curiser la zone et √©liminer les hostiles. "
            f"Apportez vos meilleurs vaisseaux de combat ! Butin partag√© entre tous les participants.\"*"
        )
        await message.channel.send(embed=embed)
    
    async def handle_description(self, message: discord.Message, session):
        """G√®re la saisie de la description"""
        description = message.content.strip()
        
        if len(description) < 10:
            embed = create_error_embed(
                "‚ùå Description trop courte",
                "La description doit contenir au moins 10 caract√®res.\n\n"
                "Donnez plus de d√©tails sur votre √©v√©nement !"
            )
            await message.channel.send(embed=embed)
            return
            
        if len(description) > 2000:
            embed = create_error_embed(
                "‚ùå Description trop longue",
                "La description ne peut pas d√©passer 2000 caract√®res.\n\n"
                "Essayez de r√©sumer les points essentiels."
            )
            await message.channel.send(embed=embed)
            return
        
        session.data['description'] = description
        
        # R√©cup√©rer les organisations de l'utilisateur
        embed = create_success_embed(
            "‚úÖ Description enregistr√©e",
            f"**Description :** {description[:200]}{'...' if len(description) > 200 else ''}\n\n"
            f"Maintenant, choisissez l'organisation qui h√©berge cet √©v√©nement.\n\n"
            f"Envoyez-moi :\n"
            f"‚Ä¢ Le **nom** de l'organisation\n"
            f"‚Ä¢ Ou son **tag** (ex: TEST, CORP)\n"
            f"‚Ä¢ Ou son **ID** si vous le connaissez\n\n"
            f"üí° *Si vous n'√™tes membre d'aucune organisation, tapez \"aucune\"*"
        )
        await message.channel.send(embed=embed)
    
    async def handle_organization(self, message: discord.Message, session):
        """G√®re la s√©lection de l'organisation"""
        org_input = message.content.strip()
        
        if org_input.lower() in ['aucune', 'none', 'pas', 'non']:
            embed = create_error_embed(
                "‚ùå Organisation requise",
                "Vous devez √™tre membre d'une organisation pour cr√©er un √©v√©nement.\n\n"
                "Cr√©ez d'abord une organisation sur [VerseLink](http://localhost:3000/organizations/create) "
                "ou rejoignez-en une existante."
            )
            await message.channel.send(embed=embed)
            return
        
        try:
            # Essayer de trouver l'organisation
            async with self.api as api:
                # Si c'est un UUID, essayer directement
                if len(org_input) > 30 and '-' in org_input:
                    try:
                        org = await api.get_organization(org_input)
                        session.data['org_id'] = org['id']
                        session.data['org_name'] = org['name']
                    except:
                        raise Exception("Organisation non trouv√©e avec cet ID")
                else:
                    # Chercher par nom ou tag
                    orgs = await api.get_organizations(limit=50)
                    found_org = None
                    
                    for org in orgs:
                        if (org.get('name', '').lower() == org_input.lower() or 
                            org.get('tag', '').lower() == org_input.lower()):
                            found_org = org
                            break
                    
                    if not found_org:
                        raise Exception("Organisation non trouv√©e")
                    
                    session.data['org_id'] = found_org['id']
                    session.data['org_name'] = found_org['name']
            
            embed = create_success_embed(
                "‚úÖ Organisation s√©lectionn√©e",
                f"**Organisation :** {session.data['org_name']}\n\n"
                f"Maintenant, d√©finissons la date et l'heure de l'√©v√©nement.\n\n"
                f"üìÖ **Formats accept√©s :**\n"
                f"‚Ä¢ `25/12/2025 20:30` (JJ/MM/AAAA HH:MM)\n"
                f"‚Ä¢ `2025-12-25 20:30` (AAAA-MM-JJ HH:MM)\n"
                f"‚Ä¢ `demain 20h` ou `demain 20:30`\n"
                f"‚Ä¢ `dans 2 jours 19h`\n\n"
                f"‚è∞ **Important :** L'heure est en UTC (temps universel)"
            )
            await message.channel.send(embed=embed)
            
        except Exception as e:
            embed = create_error_embed(
                "‚ùå Organisation non trouv√©e",
                f"Impossible de trouver l'organisation \"{org_input}\".\n\n"
                f"V√©rifiez :\n"
                f"‚Ä¢ L'orthographe du nom\n"
                f"‚Ä¢ Que vous √™tes bien membre\n"
                f"‚Ä¢ Que l'organisation existe\n\n"
                f"Essayez avec le nom complet ou le tag."
            )
            await message.channel.send(embed=embed)
    
    async def handle_date(self, message: discord.Message, session):
        """G√®re la saisie de la date"""
        date_input = message.content.strip()
        
        try:
            parsed_date = self.parse_date(date_input)
            
            # V√©rifier que la date est dans le futur
            if parsed_date <= datetime.utcnow():
                embed = create_error_embed(
                    "‚ùå Date invalide",
                    "La date doit √™tre dans le futur.\n\n"
                    f"Date saisie : {parsed_date.strftime('%d/%m/%Y √† %H:%M UTC')}\n"
                    f"Maintenant : {datetime.utcnow().strftime('%d/%m/%Y √† %H:%M UTC')}"
                )
                await message.channel.send(embed=embed)
                return
            
            # V√©rifier que ce n'est pas trop loin dans le futur (1 an max)
            if parsed_date > datetime.utcnow() + timedelta(days=365):
                embed = create_error_embed(
                    "‚ùå Date trop √©loign√©e",
                    "L'√©v√©nement ne peut pas √™tre programm√© √† plus d'un an.\n\n"
                    "Choisissez une date plus proche."
                )
                await message.channel.send(embed=embed)
                return
            
            session.data['start_at_utc'] = parsed_date.isoformat()
            
            embed = create_success_embed(
                "‚úÖ Date enregistr√©e",
                f"**Date et heure :** {parsed_date.strftime('%d/%m/%Y √† %H:%M UTC')}\n"
                f"**Discord :** <t:{int(parsed_date.timestamp())}:F>\n\n"
                f"Maintenant, indiquez la dur√©e de l'√©v√©nement en minutes.\n\n"
                f"‚è±Ô∏è **Exemples :**\n"
                f"‚Ä¢ `60` pour 1 heure\n"
                f"‚Ä¢ `120` pour 2 heures\n"
                f"‚Ä¢ `90` pour 1h30\n"
                f"‚Ä¢ `240` pour 4 heures"
            )
            await message.channel.send(embed=embed)
            
        except ValueError as e:
            embed = create_error_embed(
                "‚ùå Format de date invalide",
                f"Je n'ai pas pu comprendre cette date : \"{date_input}\"\n\n"
                f"üìÖ **Formats accept√©s :**\n"
                f"‚Ä¢ `25/12/2025 20:30`\n"
                f"‚Ä¢ `2025-12-25 20:30`\n"
                f"‚Ä¢ `demain 20h`\n"
                f"‚Ä¢ `dans 3 jours 19:30`\n\n"
                f"R√©essayez avec un de ces formats."
            )
            await message.channel.send(embed=embed)
    
    def parse_date(self, date_input: str) -> datetime:
        """Parse une date en format naturel"""
        date_input = date_input.lower().strip()
        
        # Format relatif : "demain 20h", "dans 2 jours 19:30"
        if "demain" in date_input:
            time_match = re.search(r'(\d{1,2})h?:?(\d{0,2})', date_input)
            if time_match:
                hour = int(time_match.group(1))
                minute = int(time_match.group(2)) if time_match.group(2) else 0
                tomorrow = datetime.utcnow() + timedelta(days=1)
                return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        if "dans" in date_input and "jour" in date_input:
            days_match = re.search(r'dans\s+(\d+)\s+jours?', date_input)
            time_match = re.search(r'(\d{1,2})h?:?(\d{0,2})', date_input)
            if days_match and time_match:
                days = int(days_match.group(1))
                hour = int(time_match.group(1))
                minute = int(time_match.group(2)) if time_match.group(2) else 0
                future_date = datetime.utcnow() + timedelta(days=days)
                return future_date.replace(hour=hour, minute=minute, second=0, microsecond=0)
        
        # Format standard : DD/MM/YYYY HH:MM ou YYYY-MM-DD HH:MM
        try:
            # Essayer DD/MM/YYYY HH:MM
            if '/' in date_input:
                return datetime.strptime(date_input, '%d/%m/%Y %H:%M')
            # Essayer YYYY-MM-DD HH:MM
            elif '-' in date_input:
                return datetime.strptime(date_input, '%Y-%m-%d %H:%M')
        except ValueError:
            pass
        
        raise ValueError(f"Format de date non reconnu : {date_input}")
    
    async def handle_duration(self, message: discord.Message, session):
        """G√®re la saisie de la dur√©e"""
        try:
            duration = int(message.content.strip())
            
            if duration < 15:
                embed = create_error_embed(
                    "‚ùå Dur√©e trop courte",
                    "La dur√©e minimum est de 15 minutes.\n\n"
                    "Pour un √©v√©nement si court, utilisez plut√¥t le chat vocal !"
                )
                await message.channel.send(embed=embed)
                return
            
            if duration > 1440:  # 24 heures
                embed = create_error_embed(
                    "‚ùå Dur√©e trop longue",
                    "La dur√©e maximum est de 24 heures (1440 minutes).\n\n"
                    "Pour des √©v√©nements plus longs, cr√©ez plusieurs sessions."
                )
                await message.channel.send(embed=embed)
                return
            
            session.data['duration_minutes'] = duration
            
            # Calculer l'heure de fin
            start_time = datetime.fromisoformat(session.data['start_at_utc'])
            end_time = start_time + timedelta(minutes=duration)
            
            hours = duration // 60
            minutes = duration % 60
            duration_str = f"{hours}h{minutes:02d}" if hours > 0 else f"{minutes}min"
            
            embed = create_success_embed(
                "‚úÖ Dur√©e enregistr√©e",
                f"**Dur√©e :** {duration_str} ({duration} minutes)\n"
                f"**Fin pr√©vue :** <t:{int(end_time.timestamp())}:F>\n\n"
                f"Maintenant, indiquez le lieu de l'√©v√©nement.\n\n"
                f"üåç **Exemples :**\n"
                f"‚Ä¢ `Jumptown, Yela`\n"
                f"‚Ä¢ `Station Port Olisar`\n"
                f"‚Ä¢ `Syst√®me Pyro`\n"
                f"‚Ä¢ `Arena Commander`\n\n"
                f"üí° *Ou tapez \"skip\" pour ignorer cette √©tape*"
            )
            await message.channel.send(embed=embed)
            
        except ValueError:
            embed = create_error_embed(
                "‚ùå Dur√©e invalide",
                "Veuillez saisir un nombre entier de minutes.\n\n"
                f"Exemples : `60`, `120`, `90`"
            )
            await message.channel.send(embed=embed)
    
    async def handle_location(self, message: discord.Message, session):
        """G√®re la saisie du lieu"""
        location = message.content.strip()
        
        if location.lower() in ['skip', 'ignorer', 'passer', '']:
            session.data['location'] = None
        else:
            if len(location) > 200:
                embed = create_error_embed(
                    "‚ùå Lieu trop long",
                    "Le lieu ne peut pas d√©passer 200 caract√®res."
                )
                await message.channel.send(embed=embed)
                return
            session.data['location'] = location
        
        embed = create_success_embed(
            "‚úÖ Lieu enregistr√©",
            f"**Lieu :** {session.data.get('location', 'Non sp√©cifi√©')}\n\n"
            f"Combien de participants maximum voulez-vous ?\n\n"
            f"üë• **Options :**\n"
            f"‚Ä¢ Un nombre (ex: `20`, `50`)\n"
            f"‚Ä¢ `illimit√©` pour aucune limite\n\n"
            f"üí° *Conseil : Limitez selon la capacit√© de votre organisation*"
        )
        await message.channel.send(embed=embed)
    
    async def handle_max_participants(self, message: discord.Message, session):
        """G√®re la saisie du nombre maximum de participants"""
        input_text = message.content.strip().lower()
        
        if input_text in ['illimit√©', 'illimite', 'unlimited', 'infini', 'aucune', 'skip']:
            session.data['max_participants'] = None
            max_text = "Illimit√©"
        else:
            try:
                max_participants = int(input_text)
                if max_participants < 1:
                    embed = create_error_embed(
                        "‚ùå Nombre invalide",
                        "Le nombre de participants doit √™tre au moins 1.\n\n"
                        "Ou tapez `illimit√©` pour aucune limite."
                    )
                    await message.channel.send(embed=embed)
                    return
                
                if max_participants > 1000:
                    embed = create_error_embed(
                        "‚ùå Nombre trop √©lev√©",
                        "Le maximum est de 1000 participants.\n\n"
                        "Pour plus, utilisez `illimit√©`."
                    )
                    await message.channel.send(embed=embed)
                    return
                
                session.data['max_participants'] = max_participants
                max_text = f"{max_participants} participants"
                
            except ValueError:
                embed = create_error_embed(
                    "‚ùå Format invalide",
                    "Veuillez saisir :\n"
                    "‚Ä¢ Un nombre (ex: `20`)\n"
                    "‚Ä¢ Ou `illimit√©`"
                )
                await message.channel.send(embed=embed)
                return
        
        embed = create_success_embed(
            "‚úÖ Participants enregistr√©s",
            f"**Maximum :** {max_text}\n\n"
            f"Voulez-vous cr√©er des r√¥les sp√©cifiques pour cet √©v√©nement ?\n\n"
            f"üé≠ **Exemples de r√¥les :**\n"
            f"‚Ä¢ Pilote (10 places)\n"
            f"‚Ä¢ Support (5 places)\n"
            f"‚Ä¢ Commandant (1 place)\n\n"
            f"üìù **Format :** `Nom du r√¥le : Nombre de places : Description`\n"
            f"üìù **Exemple :** `Pilote : 10 : Pilotes principaux pour l'assaut`\n\n"
            f"üí° *Tapez \"skip\" pour ignorer ou cr√©er plusieurs r√¥les s√©par√©s par des retours √† la ligne*"
        )
        await message.channel.send(embed=embed)
    
    async def handle_roles(self, message: discord.Message, session):
        """G√®re la cr√©ation des r√¥les"""
        roles_text = message.content.strip()
        
        if roles_text.lower() in ['skip', 'ignorer', 'passer', 'non', 'aucun']:
            session.data['roles'] = []
        else:
            try:
                roles = []
                lines = roles_text.split('\n')
                
                for line in lines:
                    line = line.strip()
                    if not line:
                        continue
                    
                    parts = line.split(':')
                    if len(parts) < 2:
                        raise ValueError(f"Format invalide pour : {line}")
                    
                    name = parts[0].strip()
                    capacity = int(parts[1].strip())
                    description = parts[2].strip() if len(parts) > 2 else ""
                    
                    if capacity < 1:
                        raise ValueError("La capacit√© doit √™tre au moins 1")
                    
                    roles.append({
                        'name': name,
                        'capacity': capacity,
                        'description': description
                    })
                
                if len(roles) > 10:
                    embed = create_error_embed(
                        "‚ùå Trop de r√¥les",
                        "Maximum 10 r√¥les par √©v√©nement.\n\n"
                        "Essayez de regrouper certains r√¥les similaires."
                    )
                    await message.channel.send(embed=embed)
                    return
                
                session.data['roles'] = roles
                
            except (ValueError, IndexError) as e:
                embed = create_error_embed(
                    "‚ùå Format des r√¥les invalide",
                    f"Erreur : {str(e)}\n\n"
                    f"**Format attendu :**\n"
                    f"`Nom : Capacit√© : Description`\n\n"
                    f"**Exemple :**\n"
                    f"`Pilote : 10 : Pilotes principaux`\n"
                    f"`Support : 5 : √âquipe de soutien`"
                )
                await message.channel.send(embed=embed)
                return
        
        roles_summary = "Aucun r√¥le sp√©cifique"
        if session.data['roles']:
            roles_summary = "\n".join([f"‚Ä¢ {r['name']} ({r['capacity']} places)" for r in session.data['roles']])
        
        embed = create_success_embed(
            "‚úÖ R√¥les enregistr√©s",
            f"**R√¥les :**\n{roles_summary}\n\n"
            f"Enfin, choisissez la visibilit√© de votre √©v√©nement :\n\n"
            f"üëÅÔ∏è **Options :**\n"
            f"‚Ä¢ `public` - Visible par tous\n"
            f"‚Ä¢ `unlisted` - Visible avec le lien uniquement\n"
            f"‚Ä¢ `private` - Visible par les membres de l'organisation seulement"
        )
        await message.channel.send(embed=embed)
    
    async def handle_visibility(self, message: discord.Message, session):
        """G√®re la s√©lection de la visibilit√©"""
        visibility = message.content.strip().lower()
        
        if visibility not in ['public', 'unlisted', 'private']:
            embed = create_error_embed(
                "‚ùå Visibilit√© invalide",
                "Choisissez parmi :\n"
                "‚Ä¢ `public` - Visible par tous\n"
                "‚Ä¢ `unlisted` - Visible avec le lien uniquement\n"
                "‚Ä¢ `private` - Visible par les membres de l'organisation seulement"
            )
            await message.channel.send(embed=embed)
            return
        
        session.data['visibility'] = visibility
        
        # G√©n√©rer le r√©sum√© final
        await self.send_confirmation(message, session)
    
    async def send_confirmation(self, message: discord.Message, session):
        """Envoie la confirmation finale"""
        data = session.data
        start_time = datetime.fromisoformat(data['start_at_utc'])
        
        embed = create_embed(
            "üìã Confirmation - R√©capitulatif de l'√©v√©nement",
            "Voici le r√©capitulatif de votre √©v√©nement. V√©rifiez tous les d√©tails :",
            color=0xF59E0B
        )
        
        embed.add_field(
            name="üìù Informations G√©n√©rales",
            value=f"**Titre :** {data['title']}\n"
                  f"**Type :** {data['type'].title()}\n"
                  f"**Organisation :** {data['org_name']}",
            inline=False
        )
        
        embed.add_field(
            name="üìÖ Planning",
            value=f"**D√©but :** <t:{int(start_time.timestamp())}:F>\n"
                  f"**Dur√©e :** {data['duration_minutes']} minutes\n"
                  f"**Lieu :** {data.get('location', 'Non sp√©cifi√©')}",
            inline=False
        )
        
        embed.add_field(
            name="üë• Participants",
            value=f"**Maximum :** {data.get('max_participants', 'Illimit√©')}\n"
                  f"**R√¥les :** {len(data.get('roles', []))} r√¥le(s) d√©fini(s)\n"
                  f"**Visibilit√© :** {data['visibility'].title()}",
            inline=False
        )
        
        if data.get('roles'):
            roles_text = "\n".join([f"‚Ä¢ {r['name']} ({r['capacity']})" for r in data['roles']])
            embed.add_field(name="üé≠ R√¥les D√©finis", value=roles_text, inline=False)
        
        embed.add_field(
            name="‚úÖ Validation",
            value="Tapez `confirmer` pour cr√©er l'√©v√©nement\n"
                  "Tapez `modifier` pour changer des √©l√©ments\n"
                  "Tapez `annuler` pour tout annuler",
            inline=False
        )
        
        await message.channel.send(embed=embed)
    
    async def handle_confirmation(self, message: discord.Message, session):
        """G√®re la confirmation finale"""
        response = message.content.strip().lower()
        
        if response in ['confirmer', 'confirm', 'oui', 'yes', 'valider']:
            await self.create_event(message, session)
        elif response in ['modifier', 'edit', 'changer']:
            await self.handle_modification(message, session)
        elif response in ['annuler', 'cancel', 'non', 'no']:
            await self.cancel_creation(message, session)
        else:
            embed = create_warning_embed(
                "‚ùì R√©ponse non reconnue",
                "Veuillez r√©pondre :\n"
                "‚Ä¢ `confirmer` pour cr√©er l'√©v√©nement\n"
                "‚Ä¢ `modifier` pour changer des √©l√©ments\n"
                "‚Ä¢ `annuler` pour tout annuler"
            )
            await message.channel.send(embed=embed)
    
    async def create_event(self, message: discord.Message, session):
        """Cr√©e l'√©v√©nement final"""
        try:
            # Pr√©parer les donn√©es pour l'API
            event_data = {
                'title': session.data['title'],
                'description': session.data['description'],  
                'type': session.data['type'],
                'start_at_utc': session.data['start_at_utc'],
                'duration_minutes': session.data['duration_minutes'],
                'location': session.data.get('location'),
                'max_participants': session.data.get('max_participants'),
                'visibility': session.data['visibility'],
                'discord_integration_enabled': True,
                'roles': session.data.get('roles', []),
                'allowed_org_ids': []
            }
            
            # Cr√©er l'√©v√©nement
            async with self.api as api:
                result = await api.create_event(session.data['org_id'], event_data)
            
            embed = create_success_embed(
                "üéâ √âv√©nement cr√©√© avec succ√®s !",
                f"**{session.data['title']}** a √©t√© cr√©√© !\n\n"
                f"üîó **Lien :** [Voir l'√©v√©nement](http://localhost:3000/events/{result['event_id']})\n"
                f"üìÖ **D√©but :** <t:{int(datetime.fromisoformat(session.data['start_at_utc']).timestamp())}:F>\n"
                f"üë• **Organisation :** {session.data['org_name']}\n\n"
                f"L'√©v√©nement sera automatiquement annonc√© sur les serveurs Discord configur√©s !"
            )
            
            await message.channel.send(embed=embed)
            
            # Terminer la session
            from interactive_events import SessionManager
            session_manager = SessionManager()
            session_manager.end_session(session.session_id)
            
        except Exception as e:
            embed = create_error_embed(
                "‚ùå Erreur lors de la cr√©ation",
                f"Impossible de cr√©er l'√©v√©nement :\n{str(e)}\n\n"
                f"V√©rifiez vos permissions et r√©essayez."
            )
            await message.channel.send(embed=embed)
    
    async def handle_modification(self, message: discord.Message, session):
        """G√®re la modification d'√©l√©ments"""
        embed = create_info_embed(
            "üîß Modification",
            "Quelle information voulez-vous modifier ?\n\n"
            "**Disponible :**\n"
            "‚Ä¢ `titre` - Changer le titre\n"
            "‚Ä¢ `description` - Changer la description\n"
            "‚Ä¢ `date` - Changer la date/heure\n"
            "‚Ä¢ `dur√©e` - Changer la dur√©e\n"
            "‚Ä¢ `lieu` - Changer le lieu\n"
            "‚Ä¢ `participants` - Changer le nombre max\n"
            "‚Ä¢ `r√¥les` - Red√©finir les r√¥les\n"
            "‚Ä¢ `visibilit√©` - Changer la visibilit√©\n\n"
            "Tapez le nom de ce que vous voulez modifier."
        )
        await message.channel.send(embed=embed)
        
        # Marquer pour modification dans la prochaine √©tape
        session.data['_modifying'] = True
    
    async def cancel_creation(self, message: discord.Message, session):
        """Annule la cr√©ation"""
        embed = create_success_embed(
            "‚úÖ Cr√©ation annul√©e",
            "La cr√©ation de l'√©v√©nement a √©t√© annul√©e.\n\n"
            "Toutes les donn√©es ont √©t√© supprim√©es.\n"
            "Vous pouvez recommencer avec `/create-event`."
        )
        await message.channel.send(embed=embed)
        
        # Terminer la session
        from interactive_events import SessionManager
        session_manager = SessionManager()
        session_manager.end_session(session.session_id)